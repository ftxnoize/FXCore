; Processed by FXCore Preprocessor V:2025.2.0.0 7 Jul 2025 - 14:52:30 -07:00
; 03 Sep 2025 7:39:34 -07:00
; Generated by GooeyCore V:2025.2
; 3 Sep 2025, 07:39:30
.MREG MR0 0
.MREG MR1 0
.MREG MR2 0
// @g_util.get_sfr(POT1_SMTH,MR6)
/****************************************************
*        GET SFR INTO MREG
*
*****************************************************/
CPY_CS	R0, POT1_SMTH //  -- replacing IN with POT1_SMTH
CPY_MC	MR6, R0 //  -- replacing OUT with MR6
// end inclusion library g_util --  subroutine get_sfr

// @g_util.get_sfr(IN0,MR5)
/****************************************************
*        GET SFR INTO MREG
*
*****************************************************/
CPY_CS	R0, IN0 //  -- replacing IN with IN0
CPY_MC	MR5, R0 //  -- replacing OUT with MR5
// end inclusion library g_util --  subroutine get_sfr

// @g_util.scale_shift(MR6,MR7,.75,.01)
/****************************************************
*        (IN*SCALE)+SHIFT
*
*****************************************************/
CPY_CM	R0, MR6		 //  -- replacing IN with MR6
MULTRI	R0, .75 //  -- replacing SCALE with .75
ADDSI	ACC32, .01 //  -- replacing SHIFT with .01
CPY_MC	MR7, ACC32	 //  -- replacing OUT with MR7
// end inclusion library g_util --  subroutine scale_shift

// @g_util.get_sfr(POT0_SMTH,MR3)
/****************************************************
*        GET SFR INTO MREG
*
*****************************************************/
CPY_CS	R0, POT0_SMTH //  -- replacing IN with POT0_SMTH
CPY_MC	MR3, R0 //  -- replacing OUT with MR3
// end inclusion library g_util --  subroutine get_sfr

// @g_dsp.decimator(MR5,MR7,MR8,MR0,MR1,MR2)
/****************************************************
*        DECIMATOR, UNDER SAMPLER/ALIASER, RESAMPLES
*        THE DATA AT A SLOWER RATE THAN THE SAMPLE RATE
*****************************************************/
CPY_CM	R0, MR0 //  -- replacing PTR with MR0
CPY_CM	R1, MR1 //  -- replacing OLD with MR1
CPY_CM	R2, MR2 //  -- replacing CUR with MR2
CPY_CM	R3, MR7 //  -- replacing RATIO with MR7
ADD	R0, R3 
CPY_CC	R0, ACC32
JGEZ	ACC32,	IS_POS_10
WRDLD	ACC32, 0X7FFF
ORI	ACC32, 0XFFFF
AND	ACC32, R0 
CPY_CC	R0, ACC32 
CPY_CC	R1, R2 
CPY_CM	R2, MR5  //  -- replacing IN with MR5
IS_POS_10: 
SUBS	R2, R1
MULTRR	R0, ACC32
ADDS	R1, ACC32
CPY_MC	MR8, ACC32 //  -- replacing OUT with MR8
; SAVE VALUES
CPY_MC	MR2, R2 //  -- replacing CUR with MR2
CPY_MC	MR1, R1 //  -- replacing OLD with MR1
CPY_MC	MR0, R0 //  -- replacing PTR with MR0
// end inclusion library g_dsp --  subroutine decimator

// @g_dsp.bit_crusher(MR8,MR4,MR3)
/****************************************************
*        BIT CRUSHER, MREG CONTROLLED TO MASK BITS
*
*****************************************************/
CPY_CM	R0, MR8 //  -- replacing IN with MR8
CPY_CM	R1, MR3 //  -- replacing CONTROL with MR3
WRDLD	R2, 0X7800 
AND	R1, R2
SR	ACC32, 1 
WRDLD	R1, 0X2000
ADDS	R1, ACC32
SR	ACC32, 26 
CPY_CC	R1, ACC32 
WRDLD	ACC32, 0XFFFF 
ORI	ACC32, 0XFF00 
SLR	ACC32, R1 
CPY_CC	R3, ACC32 
; IF IN IS NEGATIVE WE NEED TO MAKE IT POSITIVE FIRST TO MASK ELSE WE ARE INCREASING THE
; AMPLITUDE OF A NEGATIVE NUMBER BY MAKING THE BITS 0
JGEZ	R0,	POS_IN_11
NEG	R0
AND	R3, ACC32 
NEG	ACC32
JMP	OUTTER_11
POS_IN_11: 
AND	R0, R3 
OUTTER_11: 
CPY_MC	MR4, ACC32  //  -- replacing OUT with MR4
// end inclusion library g_dsp --  subroutine bit_crusher

// @g_util.put_sfr(OUT0,MR4)
/****************************************************
*        PUT MREG INTO SFR
*
*****************************************************/
CPY_CM	R0, MR4 //  -- replacing IN with MR4
CPY_SC	OUT0, R0 //  -- replacing OUT with OUT0
// end inclusion library g_util --  subroutine put_sfr

